> 
> # Generated using wrapR file dune_lme4.wrapR.r
> source('get_RE.R', echo=TRUE)

> get_RE <- function(veg.long, phylo = pb.phylo, trait = pb.trait, 
+     trait.re = NULL, binary = FALSE, trans = NULL) {
+     veg.long$presence <-  .... [TRUNCATED] 

> get_phylo <- function(veg.long, phylo = pb.phylo, 
+     trait = pb.trait, trait.re = NULL, binary = FALSE, trans = NULL) {
+     veg.long$presence  .... [TRUNCATED] 
> source('hacked_code/0_pkg_func.R', echo=TRUE)

> options(stringsAsFactors = F)

> library(vegan)

> library(stringr)

> library(dplyr)

> library(brranching)

> library(tidyr)

> library(reshape2)

> library(ape)

> library(pez)

> library(lme4)

> library(phylolm)

> library(picante)

> phylo_pattern = function(veg.long, phylo, binary = FALSE, 
+     trans = NULL) {
+     if (!is.null(trans)) {
+         if (trans == "log") {
+      .... [TRUNCATED] 

> SigAIC <- function(mod, Penalty = qchisq(0.95, 1)) {
+     LL <- logLik(mod)
+     ll <- as.numeric(LL)
+     df <- attr(LL, "df")
+     as.numeric( .... [TRUNCATED] 

> Model_select_tier1R <- function(start.model, block, 
+     sig.aic = FALSE) {
+     Sigaic <- NA
+     M <- vector("list", length = length(block))
+ .... [TRUNCATED] 

> Model_select_tier2F <- function(start.model, block, 
+     sig.aic = FALSE) {
+     M = list()
+     for (j in 1:length(block)) {
+         M[[j]] < .... [TRUNCATED] 

> phylo_explained_by_multi_traits_re_sel = function(veg.long, 
+     phylo = pb.phylo, trait = pb.trait, trait.re = NULL, binary = FALSE, 
+     trans .... [TRUNCATED] 

> selection = function(veg, trait, phylo, binary = FALSE, 
+     added.traits = NULL, fixed.terms = NULL) {
+     if (!is.null(added.traits)) {
+      .... [TRUNCATED] 

> phylo_signal_slopes_envi = function(dat = NULL, veg.long = NULL, 
+     phylo, envi = NULL, binary = FALSE) {
+     if (is.null(dat)) {
+         ve .... [TRUNCATED] 

> trait_selection = function(veg.long, trait = pb.trait, 
+     binary = FALSE, trans = NULL) {
+     veg.long$presence <- as.numeric(veg.long$freq >  .... [TRUNCATED] 
> source('phyloglmm_setup.R', echo=TRUE)

> phylo.to.Z <- function(r) {
+     ntip <- length(r$tip.label)
+     Zid <- Matrix(0, ncol = length(r$edge.length), nrow = ntip)
+     nodes <- (ntip .... [TRUNCATED] 

> split_blkMat <- function(M, ind) {
+     res <- list()
+     if (length(ind) == 1) {
+         return(list(M))
+     }
+     for (i in 1:(length(ind .... [TRUNCATED] 

> modify_phylo_retrms <- function(rt, phylo, phylonm, 
+     phyloZ, nsp) {
+     n.edge <- nrow(phylo$edge)
+     phylo.pos <- c()
+     for (i in 1: .... [TRUNCATED] 

> phylo_lmm <- function(formula, data, phylo, phylonm, 
+     phyloZ, nsp = NULL, control) {
+     lmod <- lFormula(formula = formula, data = data, co .... [TRUNCATED] 

> phylo_glmm <- function(formula, data, phylo, phylonm, 
+     phyloZ, control, family) {
+     glmod <- glFormula(formula = formula, data = data, con .... [TRUNCATED] 
> source('dune_lme4.R', echo=TRUE)

> library(ape)

> library(Matrix)

> library(lme4)

> library(dplyr)

> debug(phylo_lmm)

> debug(modify_phylo_retrms)

> dd <- data.frame(dat)

> print(dd %>% count(site))
# A tibble: 20 x 2
     site     n
   <fctr> <int>
 1      1    28
 2      2    28
 3      3    28
 4      4    28
 5      5    28
 6      6    28
 7      7    28
 8      8    28
 9      9    28
10     10    28
11     11    28
12     12    28
13     13    28
14     14    28
15     15    28
16     16    28
17     17    28
18     18    28
19     19    28
20     20    28

> phy <- get_phylo(veg.long = dune.veg2, trait = dune.traits2[c(1, 
+     2)], trait.re = c("log.sla"), phylo = dune.phylo2, trans = "log")

> phyZ <- phylo.to.Z(phy)

> phyZ <- phyZ[order(rownames(phyZ)), ]

> dat <- (dat %>% rowwise() %>% mutate(obs = sp))

> lme4time_1 <- system.time(lme4fit_1 <- phylo_lmm(Y ~ 
+     1 + log.sla + annual + (1 | obs) + (1 | sp) + (1 | sp:site) + 
+         (0 + log.sla |  .... [TRUNCATED] 
debugging in: phylo_lmm(Y ~ 1 + log.sla + annual + (1 | obs) + (1 | sp) + (1 | 
    sp:site) + (0 + log.sla | site) + (1 | site), data = dat, 
    phylonm = c("sp", "sp:site"), nsp = 28, phylo = phy, phyloZ = phyZ, 
    control = lmerControl(check.nobs.vs.nlev = "ignore", check.nobs.vs.nRE = "ignore"))
debug: {
    lmod <- lFormula(formula = formula, data = data, control = control)
    lmod$reTrms <- modify_phylo_retrms(lmod$reTrms, phylo, phylonm, 
        phyloZ, nsp)
    devfun <- do.call(mkLmerDevfun, lmod)
    opt <- optimizeLmer(devfun, control = control$optCtrl)
    mkMerMod(environment(devfun), opt, lmod$reTrms, fr = lmod$fr)
}
Browse[2]> # Wrapped output file dune_lme4.wrapR.rout
Browse[2]> 
